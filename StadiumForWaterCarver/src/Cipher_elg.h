/*
 * Cipher_elg.h
 *
 *  Created on: 03.10.2010
 *      Author: stephaniebayer
 *
 *      Class represents a ciphertext generated by ElGammal
 *      No encryption and decryption functionality is provided; this is given by class ElGamal
 */


#ifndef CIPHER_ELG_H_
#define CIPHER_ELG_H_


#include "FakeZZ.h"
NTL_CLIENT

#include "Mod_p.h"
#include "CurvePoint.h"

class Cipher_elg {
private:
	CurvePoint u;
	ZZ mod; // modular values of the calculations in the cyclic group
public:
	//Constructors & Destructor
	Cipher_elg();
	Cipher_elg(CurvePoint u_val, ZZ mod);
	Cipher_elg(Mod_p u_t);
	virtual ~Cipher_elg();

        // added: explicit initializer
	Cipher_elg(bool dummy);

	//Access to the parameters
	CurvePoint get_u() const;
	ZZ get_mod() const;

	//Operators functionality
	void operator =(const Cipher_elg& c);
	Cipher_elg operator *(const Cipher_elg& el)const;
	bool operator ==(const Cipher_elg& b) const;

	static void mult(Cipher_elg& a, const Cipher_elg& b, const Cipher_elg&  c);
	static void expo(Cipher_elg& e, const Cipher_elg& el, const ZZ expo);

	//Output and Input
	friend ostream& operator<<(ostream& os, const Cipher_elg el);
	friend istream& operator >>(istream& is, Cipher_elg& el);

	void print() const;
};

#endif /* CIPHER_ELG_H_ */

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ctcrypto

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/ctcrypto/crypto"
)

// MarshalJSON marshals as JSON.
func (i IndividualProof) MarshalJSON() ([]byte, error) {
	type IndividualProof struct {
		CHash  crypto.Key      `json:"cHash"     gencodec:"required"`
		Proof1 CommitmentProof `json:"proof1"    gencodec:"required"`
		Proof2 CommitmentProof `json:"proof2"    gencodec:"required"`
	}
	var enc IndividualProof
	enc.CHash = i.CHash
	enc.Proof1 = i.Proof1
	enc.Proof2 = i.Proof2
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (i *IndividualProof) UnmarshalJSON(input []byte) error {
	type IndividualProof struct {
		CHash  *crypto.Key      `json:"cHash"     gencodec:"required"`
		Proof1 *CommitmentProof `json:"proof1"    gencodec:"required"`
		Proof2 *CommitmentProof `json:"proof2"    gencodec:"required"`
	}
	var dec IndividualProof
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.CHash == nil {
		return errors.New("missing required field 'cHash' for IndividualProof")
	}
	i.CHash = *dec.CHash
	if dec.Proof1 == nil {
		return errors.New("missing required field 'proof1' for IndividualProof")
	}
	i.Proof1 = *dec.Proof1
	if dec.Proof2 == nil {
		return errors.New("missing required field 'proof2' for IndividualProof")
	}
	i.Proof2 = *dec.Proof2
	return nil
}

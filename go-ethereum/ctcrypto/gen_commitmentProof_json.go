// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ctcrypto

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/ctcrypto/crypto"
)

// MarshalJSON marshals as JSON.
func (c CommitmentProof) MarshalJSON() ([]byte, error) {
	type CommitmentProof struct {
		C  crypto.Key `json:"C"    gencodec:"required"`
		D  crypto.Key `json:"D"    gencodec:"required"`
		D1 crypto.Key `json:"D1"   gencodec:"required"`
		D2 crypto.Key `json:"D2"   gencodec:"required"`
	}
	var enc CommitmentProof
	enc.C = c.C
	enc.D = c.D
	enc.D1 = c.D1
	enc.D2 = c.D2
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *CommitmentProof) UnmarshalJSON(input []byte) error {
	type CommitmentProof struct {
		C  *crypto.Key `json:"C"    gencodec:"required"`
		D  *crypto.Key `json:"D"    gencodec:"required"`
		D1 *crypto.Key `json:"D1"   gencodec:"required"`
		D2 *crypto.Key `json:"D2"   gencodec:"required"`
	}
	var dec CommitmentProof
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.C == nil {
		return errors.New("missing required field 'C' for CommitmentProof")
	}
	c.C = *dec.C
	if dec.D == nil {
		return errors.New("missing required field 'D' for CommitmentProof")
	}
	c.D = *dec.D
	if dec.D1 == nil {
		return errors.New("missing required field 'D1' for CommitmentProof")
	}
	c.D1 = *dec.D1
	if dec.D2 == nil {
		return errors.New("missing required field 'D2' for CommitmentProof")
	}
	c.D2 = *dec.D2
	return nil
}
